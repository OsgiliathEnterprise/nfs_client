---

- name: Nfs-client-automount-entry | create libvirt conf folder
  ansible.builtin.file:
    state: directory
    dest: "{{ mountpoint.local }}"
    mode: "0755"
    owner: "root"
    group: "root"
  when: mountpoint.local is defined and (mountpoint.csi_mount is not defined or not mountpoint.csi_mount)
  failed_when: False
  become: true

- name: Nfs-client-automount-entry | create automountmap for client
  ansible.builtin.shell: |
    set -o pipefail && echo '{{ company_realm_password }}' | kinit admin > /dev/null
    ipa automountmap-add default auto.{{ hostname | default(volume_machine_hostname.stdout) + '.' + mountpoint.local | replace('/', '') }}
  delegate_to: "{{ groups[idm_group][0] }}"
  when: mountpoint.local is defined and (mountpoint.csi_mount is not defined or not mountpoint.csi_mount)
  no_log: "{{ secure_logs }}"
  failed_when: False
  register: automountmap_added_master
  changed_when: "'Added automount map' in automountmap_added_master.stdout"
  become: true

- name: Nfs-client-automount-entry | create automountkey on master
  ansible.builtin.shell: |
    set -o pipefail && echo '{{ company_realm_password }}' | kinit admin > /dev/null
    ipa automountkey-add default auto.master --key={{ mountpoint.local }} --info=auto.{{ hostname | default(volume_machine_hostname.stdout) + '.' + mountpoint.local | replace('/', '') }}
  delegate_to: "{{ groups[idm_group][0] }}"
  when: mountpoint.local is defined and (mountpoint.csi_mount is not defined or not mountpoint.csi_mount)
  register: automountkey_added_master
  changed_when: "'Added automount key' in automountkey_added_master.stdout"
  notify: nfs_client | handler | reload-automount
  no_log: "{{ secure_logs }}"
  failed_when: False
  become: true

- name: Nfs-client-automount-entry | create automountkey for secure mountpoint
  ansible.builtin.shell: |
    set -o pipefail && echo '{{ company_realm_password }}' | kinit admin > /dev/null
    ipa automountkey-add default auto.{{ hostname | default(volume_machine_hostname.stdout) + '.' + mountpoint.local | replace('/', '') }} --key='*' --info="-fstype=nfs4,rw,sec=krb5p,soft,rsize=8192,wsize=8192 {{ nfs_server.host }}:{{ mountpoint.remote }}"
  delegate_to: "{{ groups[idm_group][0] }}" # the key was {{ hostname | default(volume_machine_hostname.stdout) }} but it was not really appealing for users
  when: mountpoint.local is defined and (mountpoint.csi_mount is not defined or not mountpoint.csi_mount) and (mountpoint.insecure is not defined or not mountpoint.insecure)
  no_log: "{{ secure_logs }}"
  register: automountkey_added
  changed_when: "'Added automount key' in automountkey_added.stdout"
  failed_when: False
  notify: nfs_client | handler | reload-automount
  become: true

- name: Nfs-client-automount-entry | create automountkey for insecure mountpoint
  ansible.builtin.shell: |
    set -o pipefail && echo '{{ company_realm_password }}' | kinit admin > /dev/null
    ipa automountkey-add default auto.{{ hostname | default(volume_machine_hostname.stdout) + '.' + mountpoint.local | replace('/', '') }} --key='{{ mountpoint.min_ip_to_share | ansible.utils.next_nth_usable(mountpoint.nth_ips_to_share | default(9)) }}' --info="-fstype=nfs4,rw,soft,rsize=8192,wsize=8192 {{ nfs_server.host }}:{{ mountpoint.remote }}"
  delegate_to: "{{ groups[idm_group][0] }}" # the key was {{ hostname | default(volume_machine_hostname.stdout) }} but it was not really appealing for users
  when: mountpoint.local is defined and (mountpoint.csi_mount is not defined or not mountpoint.csi_mount) and (mountpoint.insecure is defined and mountpoint.insecure)
  no_log: "{{ secure_logs }}"
  register: automountkey_added
  changed_when: "'Added automount key' in automountkey_added.stdout"
  failed_when: False
  notify: nfs_client | handler | reload-automount
  become: true
